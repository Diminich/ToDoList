{"version":3,"sources":["TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","TodoListTitle.tsx","AddNewItemForm.tsx","api.tsx","reducer.tsx","TodoList.tsx","loginReducer.tsx","Login.tsx","LogOut.tsx","App.tsx","serviceWorker.js","store.tsx","index.tsx"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","task","id","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priorityTitle","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","Fragment","deleteTodolist","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","newTaskTitle","todolistId","post","concat","get","put","delete","taskId","email","password","ADD_TASK","initialState","todolists","todolistReducer","arguments","length","undefined","action","Object","objectSpread2","tl","toConsumableArray","newTodolist","filter","t","newTask","obj","TodoList","restoreState","setTasksTC","addTask","addTaskTC","newFilterValue","changeTask","forEach","updateTaskTC","deleteTodolistTC","deleteTaskTC","updateTodolistTitleTC","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","connect","dispatch","then","res","newTasks","data","item","addTaskAC","allTasks","items","setTasksAC","updateTaskAC","deleteTodolistAC","deleteTaskAC","updateTodolistTitleAC","LOG_OUT","SET_EMAIL","isLogin","loginReducer","emailTitle","passwordTitle","Login","inputEmail","inputEmailAC","inputPassword","inputPasswordAC","login","loginTC","getState","regenerator_default","async","_context","prev","next","awrap","sent","resultCode","stop","logoutTC","_context2","App","nextTodoListId","addTodoList","addTodolistTC","setTodolistsTC","src_TodoList","src_LogOut","src_Login","todolist","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAqEeA,6MAnDXC,gBAAkB,SAACC,GACf,IAAIC,EAASD,EAAEE,cAAcC,QAAU,EAAI,EAC3CC,EAAKC,MAAMC,aAAaF,EAAKC,MAAME,KAAKC,GAAIP,MAGhDQ,eAAiB,SAACT,GACdI,EAAKM,SAAS,CAACC,MAAOX,EAAEE,cAAcU,WAG1CC,MAAgB,CACZC,UAAU,EACVH,MAAOP,EAAKC,MAAME,KAAKI,SAG3BI,iBAAmB,WACfX,EAAKM,SAAS,CAACI,UAAU,OAG7BE,mBAAoB,WAChBZ,EAAKC,MAAMY,YAAYb,EAAKC,MAAME,KAAKC,GAAIJ,EAAKS,MAAMF,OACtDP,EAAKM,SAAS,CAACI,UAAU,OAG7BI,aAAe,WACXd,EAAKC,MAAMc,WAAWf,EAAKC,MAAME,KAAKC,OAG1CY,OAAS,WACL,IAAIC,EAAoBjB,EAAKC,MAAME,KAAKe,OAAS,qBAAuB,gBACpEC,EAAgB,GACpB,OAAQnB,EAAKC,MAAME,KAAKiB,UACpB,KAAK,EAAGD,EAAgB,MAAO,MAC/B,KAAK,EAAGA,EAAgB,SAAU,MAClC,KAAK,EAAGA,EAAgB,OAAQ,MAChC,KAAK,EAAGA,EAAgB,WAAY,MACpC,KAAK,EAAGA,EAAgB,QAE5B,OACQE,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,GACZI,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAW1B,QAAoC,IAA3BC,EAAKC,MAAME,KAAKN,OACzC6B,SAAU1B,EAAKL,kBACpBK,EAAKS,MAAMC,SACPW,EAAAC,EAAAC,cAAA,SAAOI,OAAQ3B,EAAKY,mBAAoBc,SAAU1B,EAAKK,eAAgBuB,WAAW,EAC3EpB,MAAOR,EAAKS,MAAMF,QACzBc,EAAAC,EAAAC,cAAA,QAAMM,QAAS7B,EAAKW,kBAAmBX,EAAKC,MAAME,KAAKI,OANjE,eAOkBY,EAPlB,IAOiCE,EAAAC,EAAAC,cAAA,UAAQM,QAAS7B,EAAKc,cAAtB,oCA/CtBgB,IAAMC,WCalBC,6MAhBXhB,OAAS,WAEL,IAAIiB,EAAgBjC,EAAKC,MAAMiC,MAAMC,IAAK,SAAChC,GAAD,OAAUkB,EAAAC,EAAAC,cAACa,EAAD,CAAcjC,KAAMA,EACRD,aAAcF,EAAKC,MAAMC,aACzBW,YAAab,EAAKC,MAAMY,YACxBE,WAAYf,EAAKC,MAAMc,eAGvF,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVS,iCAXWH,IAAMC,WCqDnBM,6MAnDX5B,MAAQ,CACJ6B,UAAU,KAGdC,iBAAmB,WACfvC,EAAKC,MAAMuC,aAAa,UAG5BC,uBAAyB,WACrBzC,EAAKC,MAAMuC,aAAa,gBAG5BE,oBAAsB,WAClB1C,EAAKC,MAAMuC,aAAa,aAG5BG,mBAAqB,WACjB3C,EAAKM,SAAS,CAACgC,UAAU,OAG7BM,mBAAqB,WACjB5C,EAAKM,SAAS,CAACgC,UAAU,OAG7BtB,OAAS,WAEL,IAAI6B,EAAyC,QAA3B7C,EAAKC,MAAM6C,YAAwB,gBAAkB,GACnEC,EAA+C,cAA3B/C,EAAKC,MAAM6C,YAA8B,gBAAkB,GAC/EE,EAA4C,WAA3BhD,EAAKC,MAAM6C,YAA2B,gBAAkB,GAE7E,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACTxB,EAAKS,MAAM6B,UAAYjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACpCH,EAAAC,EAAAC,cAAA,UAAQM,QAAS7B,EAAKuC,iBAAkBf,UAAWqB,GAAnD,OACAxB,EAAAC,EAAAC,cAAA,UAAQM,QAAS7B,EAAKyC,uBAAwBjB,UAAWuB,GAAzD,aACA1B,EAAAC,EAAAC,cAAA,UAAQM,QAAS7B,EAAK0C,oBAAqBlB,UAAWwB,GAAtD,YAGFhD,EAAKS,MAAM6B,UAAYjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACpCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAqBK,QAAS7B,EAAK2C,oBAAnD,SAGH3C,EAAKS,MAAM6B,UAAYjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACnCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAqBK,QAAS7B,EAAK4C,oBAAnD,wCA7CSd,IAAMC,WCwCpBkB,6MArCXxC,MAAgB,CACZC,UAAU,EACVH,MAAOP,EAAKC,MAAMM,SAGtBF,eAAiB,SAACT,GACdI,EAAKM,SAAS,CAACC,MAAOX,EAAEE,cAAcU,WAG1CI,mBAAqB,WACjBZ,EAAKM,SAAS,CAACI,UAAU,IACzBV,EAAKC,MAAMiD,YAAYlD,EAAKS,MAAMF,UAGtCI,iBAAmB,WACfX,EAAKM,SAAS,CAACI,UAAU,OAG7BM,OAAS,WACL,OACIK,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6B,SAAA,KAEQnD,EAAKS,MAAMC,SACLW,EAAAC,EAAAC,cAAA,SAAOf,MAAOR,EAAKS,MAAMF,MAAOqB,WAAW,EAAMD,OAAQ3B,EAAKY,mBACvDc,SAAU1B,EAAKK,iBACtBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,MAAIM,QAAS7B,EAAKW,kBAAmBX,EAAKC,MAAMM,OAChDc,EAAAC,EAAAC,cAAA,UAASC,UAAU,oBAAoBK,QAAS7B,EAAKC,MAAMmD,gBAA3D,qCA5BAtB,IAAMC,WCkDnBsB,6MAjDX5C,MAAgB,CACZ6C,OAAO,EACP/C,MAAO,MAGXgD,eAAiB,WACb,IAAIC,EAAUxD,EAAKS,MAAMF,MACzBP,EAAKM,SAAS,CAACC,MAAO,KAEN,KAAZiD,EACAxD,EAAKM,SAAS,CAACgD,OAAO,KAEtBtD,EAAKM,SAAS,CAACgD,OAAO,IAEtBtD,EAAKC,MAAMwD,QAAQD,OAG3BnD,eAAiB,SAACT,GACdI,EAAKM,SAAS,CACVgD,OAAO,EACP/C,MAAOX,EAAEE,cAAcU,WAI/BkD,WAAa,SAAC9D,GACI,UAAVA,EAAE+D,KACF3D,EAAKuD,oBAKbvC,OAAS,WACL,IAAI4C,EAAoB5D,EAAKS,MAAM6C,MAAQ,QAAU,GAErD,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAWoC,EAAmBnC,KAAK,OAAOoC,YAAY,gBACtDnC,SAAU1B,EAAKK,eACfqD,WAAY1D,EAAK0D,WACjBlD,MAAOR,EAAKS,MAAMF,QAEzBc,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqBK,QAAS7B,EAAKuD,gBAArD,sCA1CazB,IAAMC,kCCX7B+B,SAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CAACC,UAAW,0CAGZC,EAAM,SACJC,EAAsBC,GAC7B,OAAOT,EAASU,KAAT,eAAAC,OAA6BF,EAA7B,UAAiD,CAAChE,MAAO+D,KAF3DD,EAAM,SAKA9D,GACX,OAAOuD,EAASU,KAAK,cAAe,CAACjE,MAAOA,KANvC8D,EAAM,WAUX,OAAOP,EAASY,IAAI,gBAVfL,EAAM,SAaJlE,GACP,OAAO2D,EAASa,IAAT,oBAAkCxE,IAdpCkE,EAAM,SAiBAjE,GACX,OAAO0D,EAASc,OAAT,eAAAH,OAA+BrE,KAlBjCiE,EAAM,SAqBJQ,EAAgBN,GAEvB,OAAOT,EAASc,OAAT,eAAAH,OAA+BF,EAA/B,WAAAE,OAAmDI,KAvBrDR,EAAM,SA0BNE,GACL,OAAOT,EAASY,IAAT,eAAAD,OAA4BF,EAA5B,YA3BFF,EAAM,SA8BK9D,EAAegE,GAC/B,OAAOT,EAASa,IAAT,eAAAF,OAA4BF,GAAc,CAAChE,MAAOA,KA/BpD8D,EAAM,SAkCRS,EAAeC,GAClB,OAAOjB,EAASU,KAAT,cAA6B,CAACM,QAAOC,cAnCvCV,EAAM,WAuCX,OAAOP,EAASc,OAAT,gBCxCFI,EAAW,4BASlBC,EAA+B,CACjCC,UAAW,IAwNAC,EAvMS,WAA6D,IAA5D1E,EAA4D2E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApDH,EAAcM,EAAsCH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjF,OAAQC,EAAO9D,MAEX,IA7BiB,6BA8Bb,OAAO+D,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWzE,EAAMyE,UAAU/C,IAAI,SAAAuD,GAC3B,OAAIA,EAAGtF,KAAOmF,EAAOhB,WACVmB,EAEAF,OAAAC,EAAA,EAAAD,CAAA,GAAIE,EAAX,CAAexD,MAAOqD,EAAOrD,YAK7C,IAvCqB,iCAwCjB,OAAOsD,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWK,EAAOL,UAAU/C,IAAI,SAACuD,GAAD,OAAAF,OAAAC,EAAA,EAAAD,CAAA,GAAaE,EAAb,CAAiBxD,MAAO,SAGhE,IApDoB,gCAqDhB,OAAOsD,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAS,GAAAT,OAAAe,OAAAG,EAAA,EAAAH,CAAM/E,EAAMyE,WAAZ,CAAuBK,EAAOK,gBAG/C,IAzDuB,mCA0DnB,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWzE,EAAMyE,UAAUW,OAAO,SAACH,GAAD,OAAQA,EAAGtF,IAAMmF,EAAOhB,eAGlE,IA7D6B,yCA8DzB,OAAOiB,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWzE,EAAMyE,UAAU/C,IAAI,SAACuD,GAC5B,OAAIA,EAAGtF,IAAMmF,EAAOhB,WAAmBmB,EAClCF,OAAAC,EAAA,EAAAD,CAAA,GAAWE,EAAX,CAAenF,MAAOgF,EAAOhF,YAI9C,IAvEmB,+BAwEf,OAAOiF,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWzE,EAAMyE,UAAU/C,IAAI,SAAAuD,GAC3B,OAAIA,EAAGtF,KAAOmF,EAAOhB,WACViB,OAAAC,EAAA,EAAAD,CAAA,GACAE,EADP,CAEIxD,MAAOwD,EAAGxD,MAAM2D,OAAO,SAACC,GAAD,OAAOA,EAAE1F,KAAOmF,EAAOV,WAG3Ca,MAKvB,KAAKV,EACD,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWzE,EAAMyE,UAAU/C,IAAI,SAAAuD,GAC3B,OAAIA,EAAGtF,KAAOmF,EAAOhB,WACViB,OAAAC,EAAA,EAAAD,CAAA,GAAIE,EAAX,CAAexD,MAAK,GAAAuC,OAAAe,OAAAG,EAAA,EAAAH,CAAME,EAAGxD,OAAT,CAAgBqD,EAAOQ,YAEpCL,MAKvB,IA9FmB,+BA+Ff,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIyE,UAAWzE,EAAMyE,UAAU/C,IAAI,SAAAuD,GAC3B,OAAIA,EAAGtF,KAAOmF,EAAOhB,WACViB,OAAAC,EAAA,EAAAD,CAAA,GACAE,EADP,CAEIxD,MAAOwD,EAAGxD,MAAMC,IAAI,SAAC2D,GACjB,OAAIA,EAAE1F,IAAMmF,EAAOV,OACRiB,EAEAN,OAAAC,EAAA,EAAAD,CAAA,GAAIM,EAAX,GAAiBP,EAAOS,SAK7BN,MAK3B,OAAOjF,GCzFLwF,6MAkBFC,aAAe,WACXlG,EAAKC,MAAMkG,WAAWnG,EAAKC,MAAMG,OAIrCK,MAAgB,CACZqC,YAAa,SAGjBsD,QAAU,SAAC5C,GACPxD,EAAKC,MAAMoG,UAAU7C,EAASxD,EAAKC,MAAMG,OAG7CoC,aAAe,SAAC8D,GACZtG,EAAKM,SAAS,CACVwC,YAAawD,GACd,iBAKPC,WAAa,SAAC1B,EAAgBmB,GAC1BhG,EAAKC,MAAMiC,MAAMsE,QAAQ,SAAAV,GACjBA,EAAE1F,KAAOyE,GACT7E,EAAKC,MAAMwG,aAAa5B,EAAxBW,OAAAC,EAAA,EAAAD,CAAA,GAAoCM,EAApC,GAA0CE,GAAMhG,EAAKC,MAAMG,SAKvEF,aAAe,SAAC2E,EAAgBhF,GAC5BG,EAAKuG,WAAW1B,EAAQ,CAAChF,cAG7BgB,YAAc,SAACgE,EAAgBtE,GAC3BP,EAAKuG,WAAW1B,EAAQ,CAACtE,aAG7B6C,eAAiB,WACbpD,EAAKC,MAAMyG,iBAAiB1G,EAAKC,MAAMG,OAG3CW,WAAa,SAAC8D,GACV7E,EAAKC,MAAM0G,aAAa9B,EAAQ7E,EAAKC,MAAMG,OAG/C8C,YAAc,SAAC3C,GACXP,EAAKC,MAAM2G,sBAAsBrG,EAAOP,EAAKC,MAAMG,OAGvDY,OAAS,WAAM,IAAA6F,EACQ7G,EAAKC,MAAnBiC,aADM,IAAA2E,EACE,GADFA,EAEX,OACIxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACuF,EAAD,CAAevG,MAAOP,EAAKC,MAAMM,MAAO6C,eAAgBpD,EAAKoD,eAC9CF,YAAalD,EAAKkD,cACjC7B,EAAAC,EAAAC,cAACwF,EAAD,CAAgBtD,QAASzD,EAAKoG,WAIlC/E,EAAAC,EAAAC,cAACyF,EAAD,CAAe9G,aAAcF,EAAKE,aACnBW,YAAab,EAAKa,YAClBE,WAAYf,EAAKe,WACjBmB,MAAOA,EAAM2D,OAAO,SAAAC,GAChB,MAA+B,QAA3B9F,EAAKS,MAAMqC,cAGgB,WAA3B9C,EAAKS,MAAMqC,aACHgD,EAAE5E,OAEiB,cAA3BlB,EAAKS,MAAMqC,YACJgD,EAAE5E,YADb,OAInBG,EAAAC,EAAAC,cAAC0F,EAAD,CAAgBzE,aAAcxC,EAAKwC,aAAcM,YAAa9C,EAAKS,MAAMqC,mGApFjFoE,KAAKhB,sBARUpE,IAAMC,WAkGdoF,cACX,KACA,CACId,UD+CiB,SAAE7C,EAAiBe,GACxC,OAAO,SAAC6C,GACJ/C,EAAeb,EAASe,GAAY8C,KAAK,SAAAC,GACrC,IAAIC,EAAWD,EAAIE,KAAKA,KAAKC,KAC7BL,EARM,SAACrB,EAAgBxB,GAC/B,MAAO,CAAC9C,KAAMuD,EAAUe,UAASxB,cAOhBmD,CAAUH,EAAUhD,QClDjC4B,WD2DkB,SAAC5B,GACvB,OAAO,SAAC6C,GACJ/C,EAAaE,GACR8C,KAAK,SAAAC,GACF,IAAIK,EAAWL,EAAIE,KAAKI,MACxBR,EATG,SAAClF,EAAcqC,GAC9B,MAAO,CAAC9C,KAzLa,6BAyLIS,QAAOqC,cAQXsD,CAAWF,EAAUpD,QC/DtCkC,aDPoB,SAAC5B,EAAgBmB,EAAYzB,GACrD,OAAO,SAAC6C,GACJ/C,EAAe2B,GACVqB,KAAK,WACFD,EARK,SAACvC,EAAgBmB,EAAYzB,GAC9C,MAAO,CAAC9C,KAvHe,+BAuHIoD,SAAQmB,MAAKzB,cAOnBuD,CAAajD,EAAQmB,EAAKzB,QCI3CmC,iBDKwB,SAACnC,GAC7B,OAAO,SAAC6C,GACJ/C,EAAmBE,GACd8C,KAAK,WACFD,EARS,SAAC7C,GACtB,MAAO,CAAC9C,KAzImB,mCAyII8C,WAAYA,GAOtBwD,CAAiBxD,QCRlCoC,aDiBoB,SAAC9B,EAAgBN,GACzC,OAAO,SAAC6C,GACJ/C,EAAeQ,EAAQN,GAClB8C,KAAK,WACFD,EARK,SAACvC,EAAgBN,GAClC,MAAO,CAAC9C,KArJe,+BAqJI8C,aAAYM,UAOlBmD,CAAanD,EAAQN,QCpBtCqC,sBD6B6B,SAACrG,EAAegE,GACjD,OAAO,SAAC6C,GACJ/C,EAAwB9D,EAAOgE,GAC1B8C,KAAK,WACFD,EARc,SAAC7G,EAAegE,GAC1C,MAAO,CAAC9C,KAjKyB,yCAiKIlB,QAAOgE,cAOvB0D,CAAsB1H,EAAOgE,SCzCvC4C,CAUblB,oBC5IWiC,EAAU,iCACVC,EAAY,mCASnBlD,EAA4B,CAC9BmD,SAAS,EACTtD,MAAO,GACPC,SAAU,IAgECsD,EA7DM,WAA2C,IAA1C5H,EAA0C2E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCH,EAAcM,EAAoBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5D,OAAQC,EAAO9D,MACX,IAnBoB,sCAoBhB,OAAO+D,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEI2H,SAAS,IAGjB,KAAKF,EACD,OAAO1C,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEI2H,SAAS,IAGjB,KAAKD,EACD,OAAO3C,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIqE,MAAOS,EAAO+C,aAGtB,IAlCoB,sCAmChB,OAAO9C,OAAAC,EAAA,EAAAD,CAAA,GACA/E,EADP,CAEIsE,SAAUQ,EAAOgD,gBAG7B,OAAO9H,GCpCL+H,6MAEFC,WAAa,SAAC7I,GACVI,EAAKC,MAAMyI,aAAa9I,EAAEE,cAAcU,UAG5CmI,cAAgB,SAAC/I,GACbI,EAAKC,MAAM2I,gBAAgBhJ,EAAEE,cAAcU,UAG/CqI,MAAQ,WACJ7I,EAAKC,MAAM6I,mFAIX,OACIzH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,qBAAf,2OACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,qBAAf,6BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,qBAAf,kBACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAW,aAAcE,SAAUwF,KAAKuB,aAC/CpH,EAAAC,EAAAC,cAAA,SAAOC,UAAW,gBAAiBC,KAAM,WAAYC,SAAUwF,KAAKyB,gBACpEtH,EAAAC,EAAAC,cAAA,UAAQM,QAASqF,KAAK2B,OAAtB,mBAtBI/G,IAAMC,WA4BXoF,cAAQ,KAAM,CAACuB,aDoBF,SAACJ,GACzB,MAAO,CAAC7G,KAAM0G,EAAWG,eCrBeM,gBDwBb,SAACL,GAC5B,MAAO,CAAC9G,KAzDgB,sCAyDI8G,kBCzB6BO,QD4BtC,kBAAM,SAAO1B,EAAe2B,GAAtB,IAAAtI,EAAA,OAAAuI,EAAA1H,EAAA2H,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACnB3I,EAAQsI,IADWG,EAAAE,KAAA,EAAAJ,EAAA1H,EAAA+H,MAEFhF,EAAU5D,EAAMoI,MAAM/D,MAAOrE,EAAMoI,MAAM9D,WAFvC,OAGQ,IAHRmE,EAAAI,KAGZ9B,KAAK+B,YACdnC,EApBG,CAAC3F,KA/CgB,wCA+DC,wBAAAyH,EAAAM,aC5BdrC,CAAwDqB,GCrBxDrB,cAAS,KAAM,CAACsC,SFyDP,kBAAM,SAAOrC,GAAP,OAAA4B,EAAA1H,EAAA2H,MAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,cAAAM,EAAAN,KAAA,EAAAJ,EAAA1H,EAAA+H,MACLhF,KADK,OAEO,IAFPqF,EAAAJ,KAEb9B,KAAK+B,YACdnC,EAvBG,CAAC3F,KAAMyG,IAoBY,wBAAAwB,EAAAF,aEzDfrC,CATA,SAAClH,GAEf,OACIoB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAW,eAAgBK,QAAS5B,EAAMwJ,UAAlD,cCUHE,6MAEFC,eAAiB,IAMjBC,YAAc,SAACtJ,GACXP,EAAKC,MAAM6J,cAAcvJ,MAc7B2F,aAAe,WACXlG,EAAKC,MAAM8J,oBAwBf/I,OAAS,WACL,IAAMkE,EAAYlF,EAAKC,MAAMiF,UACxB/C,IAAI,SAACuD,GAAD,OAAQrE,EAAAC,EAAAC,cAACyI,EAAD,CAAUrG,IAAK+B,EAAGtF,GAAIA,GAAIsF,EAAGtF,GAAIG,MAAOmF,EAAGnF,MAAO2B,MAAOwD,EAAGxD,UAC7E,OACIb,EAAAC,EAAAC,cAAA,WACKvB,EAAKC,MAAMmI,QACR/G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwF,EAAD,CAAgBtD,QAASzD,EAAK6J,cAC9BxI,EAAAC,EAAAC,cAAC0I,EAAD,OAEJ5I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACV0D,IAEA7D,EAAAC,EAAAC,cAAC2I,EAAD,2FAhDrBhD,KAAKhB,sBAdKpE,IAAMC,WA4EToF,cAPS,SAAC1G,GACrB,MAAO,CACHyE,UAAWzE,EAAM0J,SAASjF,UAC1BkD,QAAS3H,EAAMoI,MAAMT,UAIW,CAAC0B,cLiHZ,SAAClE,GAC1B,OAAO,SAACwB,GACJ/C,EAAmBuB,GACdyB,KAAK,SAAAC,GACF,IAAI6C,EAAW7C,EAAIE,KAAKA,KAAKC,KAC7BL,EARL,CAAC3F,KA5MgB,gCA4MImE,YAQOuE,QKtHiBJ,eL+H1B,WAC1B,OAAO,SAAC3C,GACH/C,IACIgD,KAAK,SAAAC,GACNF,EAPD,CAAC3F,KAnNiB,iCAmNIyD,UAOGoC,EAAIE,YKnIzBL,CAA0DwC,GCtFrDS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECbAC,EAAcC,YAAgB,CAChCP,SAAUhF,EACV0D,MAAOR,IAMIsC,EADDC,YAAYH,EAAaI,YAAgBC,MCJvDC,IAAS/J,OACLK,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CAAUL,MAAOA,GACbtJ,EAAAC,EAAAC,cAAC0J,EAAD,OACSC,SAASC,eAAe,SFsHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC","file":"static/js/main.1f620635.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {ITask} from \"./types/interface\";\r\n\r\ninterface IState {\r\n    editMode: boolean\r\n    title: string\r\n}\r\n\r\ninterface IProps {\r\n    task: ITask\r\n    changeStatus: (id: string, status: number) => void\r\n    changeTitle: (id: string, title: string) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nclass TodoListTask extends React.Component<IProps, IState> {\r\n\r\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    state: IState = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    };\r\n\r\n    deactivateEditMode= () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({editMode: false});\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n\r\n    render = () => {\r\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\r\n        let priorityTitle = \"\";\r\n        switch (this.props.task.priority) {\r\n            case 0: priorityTitle = \"Low\"; break;\r\n            case 1: priorityTitle = \"Middle\"; break;\r\n            case 2: priorityTitle = \"High\"; break;\r\n            case 3: priorityTitle = \"Urgently\"; break;\r\n            case 4: priorityTitle = \"Later\"; break;\r\n        }\r\n        return (\r\n                <div className={containerCssClass}>\r\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\r\n                           onChange={this.onIsDoneChanged}/>\r\n                    { this.state.editMode\r\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\r\n                                 value={this.state.title} />\r\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\r\n                    }, priority: {priorityTitle} <button onClick={this.onDeleteTask}>X</button>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {ITask, ITodo} from \"./types/interface\";\r\n\r\ninterface IProps {\r\n    tasks: ITask[]\r\n    changeStatus: (id: string, status: number) => void\r\n    changeTitle: (id: string, title: string) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n    render = () => {\r\n\r\n        let tasksElements = this.props.tasks.map( (task) => <TodoListTask task={task}\r\n                                                                        changeStatus={this.props.changeStatus}\r\n                                                                        changeTitle={this.props.changeTitle}\r\n                                                                        deleteTask={this.props.deleteTask}\r\n                                                                        />);\r\n\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {tasksElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\n","import React from 'react';\r\nimport '../src/App.css';\r\n\r\ninterface IState {\r\n    isHidden: boolean\r\n}\r\n\r\ninterface IProps {\r\n    changeFilter: (changeFilter: string) => void\r\n    filterValue: string\r\n}\r\n\r\nclass TodoListFooter extends React.Component<IProps, IState> {\r\n\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter(\"All\");\r\n    };\r\n\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter(\"Completed\");\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter(\"Active\");\r\n    };\r\n\r\n    onShowFiltersClick = () => {\r\n        this.setState({isHidden: true})\r\n    };\r\n\r\n    onHideFiltersClick = () => {\r\n        this.setState({isHidden: false})\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden && <div className='todoListFooterButton'>\r\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\r\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\r\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\r\n                </div>\r\n                }\r\n                {!this.state.isHidden && <div className='todoListIsHidden'>\r\n                    <span className='todoListFooterSpan' onClick={this.onShowFiltersClick}>hide</span>\r\n                </div>\r\n                }\r\n                {this.state.isHidden && <div className='todoListIsShow'>\r\n                    <span className='todoListFooterSpan' onClick={this.onHideFiltersClick}>show</span>\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\n\r\ninterface IProps {\r\n    title: string\r\n    updateTitle: (title: string) => void\r\n    deleteTodolist: () => void\r\n}\r\n\r\ninterface IState {\r\n    editMode: boolean\r\n    title: string\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false});\r\n        this.props.updateTitle(this.state.title);\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.editMode\r\n                        ? <input value={this.state.title} autoFocus={true} onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}/>\r\n                        : <div className=\"todoList-header__title\">\r\n                            <h3 onClick={this.activateEditMode}>{this.props.title}</h3>\r\n                            < button className='buttonHeaderTitle' onClick={this.props.deleteTodolist}>X</button>\r\n                        </div>\r\n\r\n\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\";\r\nimport {logoutTC} from \"./loginReducer\";\r\n\r\ninterface IProps {\r\n    addItem: (newText: string) => void\r\n}\r\n\r\ninterface IState {\r\n    error: boolean\r\n    title: string\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        error: false,\r\n        title: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n        this.setState({title: \"\"});\r\n\r\n        if (newText === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false});\r\n            // передаём новый текст наружу\r\n            this.props.addItem(newText);\r\n        }\r\n    };\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n\r\n    render = () => {\r\n        let classNameForInput = this.state.error ? \"error\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\r\n                       onChange={this.onTitleChanged}\r\n                       onKeyPress={this.onKeyPress}\r\n                       value={this.state.title}\r\n                />\r\n                <button className='buttonAddTodoLists' onClick={this.onAddItemClick}>Add</button>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;\r\n\r\n","import axios from \"axios\";\r\nimport {ITask} from \"./types/interface\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"3af6bfa5-65e5-4eec-88f6-fc8f87e12121\"}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle: string, todolistId: string) {\r\n        return instance.post(`/todo-lists/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post(\"/todo-lists\", {title: title})\r\n    },\r\n\r\n    getTodolists() {\r\n        return instance.get(\"/todo-lists\");\r\n    },\r\n\r\n    updateTask(task: ITask) {\r\n        return instance.put(`/todo-lists/tasks`, task);\r\n    },\r\n\r\n    deleteTodolist(id: string) {\r\n        return instance.delete(`/todo-lists/${id}`)\r\n    },\r\n\r\n    deleteTask(taskId: string, todolistId:string) {\r\n        debugger\r\n        return instance.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n\r\n    updateTodolistTitle(title: string, todolistId: string) {\r\n        return instance.put(`/todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n    login (email: string, password: string | number) {\r\n        return instance.post(`/auth/login`, {email, password})\r\n    },\r\n\r\n    logout () {\r\n        return instance.delete(`/auth/login`);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import {api} from \"./api\";\r\nimport {ITask, ITodo} from \"./types/interface\";\r\nimport {ITodolist} from \"./types/interfaceAC\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const UPDATE_TODOLIST_TITLE = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\n\r\ninterface ITodolistState {\r\n    todolists: ITodo[]\r\n}\r\n\r\nconst initialState: ITodolistState = {\r\n    todolists: [\r\n        // {\r\n        //     \"id\": 0, \"title\": \"every day\",\r\n        //     tasks: [\r\n        //         {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n        //         {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n        //         {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n        //         {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n        //         {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n        //         {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n        // },\r\n        // {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n        // {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n        // {\"id\": 3, \"title\": \"dddd\", tasks: []}\r\n    ] as ITodo[]\r\n};\r\n\r\nconst todolistReducer = (state = initialState, action: ITodolist): ITodolistState => {\r\n    switch (action.type) {\r\n\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map((tl) => ({...tl, tasks: []}))\r\n            };\r\n\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            };\r\n\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter((tl) => tl.id != action.todolistId)\r\n            };\r\n\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl) => {\r\n                    if (tl.id != action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            };\r\n\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter((t) => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map((t) => {\r\n                                if (t.id != action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nconst updateTaskAC = (taskId: string, obj: ITask, todolistId: string) => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n};\r\n\r\nexport const updateTaskTC = (taskId: string, obj: ITask, todolistId: string) => {\r\n    return (dispatch: any) => {\r\n        api.updateTask(obj)\r\n            .then(() => {\r\n                dispatch(updateTaskAC(taskId, obj, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst deleteTodolistAC = (todolistId: string) => {\r\n    return {type: DELETE_TODOLIST, todolistId: todolistId};\r\n};\r\n\r\nexport const deleteTodolistTC = (todolistId: string) => {\r\n    return (dispatch: any) => {\r\n        api.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(deleteTodolistAC(todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst deleteTaskAC = (taskId: string, todolistId: string) => {\r\n    return {type: DELETE_TASK, todolistId, taskId};\r\n};\r\n\r\nexport const deleteTaskTC = (taskId: string, todolistId: string, ) => {\r\n    return (dispatch: any) => {\r\n        api.deleteTask(taskId, todolistId)\r\n            .then(() => {\r\n                dispatch(deleteTaskAC(taskId, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst updateTodolistTitleAC = (title: string, todolistId: string) => {\r\n    return {type: UPDATE_TODOLIST_TITLE, title, todolistId};\r\n};\r\n\r\nexport const updateTodolistTitleTC = (title: string, todolistId: string) => {\r\n    return (dispatch: any) => {\r\n        api.updateTodolistTitle(title, todolistId)\r\n            .then(() => {\r\n                dispatch(updateTodolistTitleAC(title, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst addTaskAC = (newTask: ITask, todolistId: string) => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n};\r\n\r\nexport const addTaskTC = ( newText: string, todolistId: string) => {\r\n    return (dispatch: any) => {\r\n        api.createTask(newText, todolistId).then(res => {\r\n            let newTasks = res.data.data.item;\r\n            dispatch(addTaskAC(newTasks, todolistId));\r\n        });\r\n    }\r\n};\r\n\r\nconst setTasksAC = (tasks: ITask, todolistId: string) => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n};\r\n\r\nexport const setTasksTC = (todolistId: string) => {\r\n    return (dispatch: any) => {\r\n        api.getTasks(todolistId)\r\n            .then(res => {\r\n                let allTasks = res.data.items;                           // items - это таски сервака\r\n                dispatch(setTasksAC(allTasks, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst addTodolistAC = (newTodolist: ITodo) => {\r\n    return {type: ADD_TODOLIST, newTodolist: newTodolist}\r\n};\r\n\r\nexport const addTodolistTC = (newTodolist: string) => {\r\n    return (dispatch: any) => {\r\n        api.createTodolist(newTodolist)\r\n            .then(res => {\r\n                let todolist = res.data.data.item;\r\n                dispatch(addTodolistAC(todolist));\r\n            });\r\n    }\r\n};\r\n\r\nconst setTodolistsAC = (todolists: ITodo) => {\r\n    return {type: SET_TODOLISTS, todolists: todolists}\r\n};\r\n\r\nexport const setTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n         api.getTodolists()\r\n            .then(res => {\r\n            dispatch(setTodolistsAC(res.data));\r\n        });\r\n    }\r\n};\r\n\r\nexport default todolistReducer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addTaskTC,\r\n    deleteTaskTC,\r\n    deleteTodolistTC,\r\n    setTasksTC,\r\n    updateTaskTC,\r\n    updateTodolistTitleTC\r\n} from \"./reducer\";\r\nimport {IObj, ITask} from \"./types/interface\";\r\n\r\ninterface IProps {\r\n    id: string\r\n    title: string\r\n    tasks: ITask[]\r\n}\r\n\r\ninterface IState {\r\n    filterValue: string\r\n}\r\n\r\ninterface IMapDispatchProps {\r\n    addTaskTC: (newText: string, id: string) => void\r\n    setTasksTC: (id: string) => void\r\n    updateTaskTC: (taskId: string, task: ITask, id: string) => void\r\n    deleteTodolistTC: (id: string) => void\r\n    deleteTaskTC: (taskid: string, id: string) => void\r\n    updateTodolistTitleTC: (title: string, id: string) => void\r\n}\r\n\r\nclass TodoList extends React.Component<IProps & IMapDispatchProps> {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.newTasksTitileRef = React.createRef();\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    // saveState = () => {\r\n    //     // переводим объект в строку\r\n    //     let stateAsString = JSON.stringify(this.state);\r\n    //     // сохраняем нашу строку в localStorage под ключом \"our-state\"\r\n    //     localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\r\n    // };\r\n\r\n    restoreState = () => {\r\n        this.props.setTasksTC(this.props.id);\r\n    };\r\n\r\n\r\n    state: IState = {\r\n        filterValue: \"All\"\r\n    };\r\n\r\n    addTask = (newText: string) => {\r\n        this.props.addTaskTC(newText, this.props.id);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        }, () => {\r\n            // this.saveState();\r\n        });\r\n    };\r\n\r\n    changeTask = (taskId: string, obj: IObj) => {\r\n        this.props.tasks.forEach(t => {\r\n            if (t.id === taskId) {\r\n                this.props.updateTaskTC(taskId, {...t, ...obj}, this.props.id)\r\n            }\r\n        })\r\n    };\r\n\r\n    changeStatus = (taskId: string, status: number) => {\r\n        this.changeTask(taskId, {status});\r\n    };\r\n\r\n    changeTitle = (taskId: string, title: string) => {\r\n        this.changeTask(taskId, {title});\r\n    };\r\n\r\n    deleteTodolist = () => {\r\n        this.props.deleteTodolistTC(this.props.id)\r\n    };\r\n\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTaskTC(taskId, this.props.id)\r\n    };\r\n\r\n    updateTitle = (title: string) => {\r\n        this.props.updateTodolistTitleTC(title, this.props.id)\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div className=\"todoList-header\">\r\n                    <TodoListTitle title={this.props.title} deleteTodolist={this.deleteTodolist}\r\n                                   updateTitle={this.updateTitle}/>\r\n                    <AddNewItemForm addItem={this.addTask}/>\r\n\r\n                </div>\r\n\r\n                <TodoListTasks changeStatus={this.changeStatus}\r\n                               changeTitle={this.changeTitle}\r\n                               deleteTask={this.deleteTask}\r\n                               tasks={tasks.filter(t => {\r\n                                   if (this.state.filterValue === \"All\") {\r\n                                       return true;\r\n                                   }\r\n                                   if (this.state.filterValue === \"Active\") {\r\n                                       return !t.isDone;\r\n                                   }\r\n                                   if (this.state.filterValue === \"Completed\") {\r\n                                       return t.isDone;\r\n                                   }\r\n                               })}/>\r\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    {\r\n        addTaskTC,\r\n        setTasksTC,\r\n        updateTaskTC,\r\n        deleteTodolistTC,\r\n        deleteTaskTC,\r\n        updateTodolistTitleTC\r\n    }\r\n)(TodoList);\r\n\r\n","import {api} from \"./api\";\r\nimport {ILogine} from \"./types/interfaceLogineAC\";\r\n\r\nexport const SET_IS_LOGIN = 'TodoList/logineReducer/SET_IS_LOGIN';\r\nexport const LOG_OUT = 'TodoList/logineReducer/LOG_OUT';\r\nexport const SET_EMAIL = 'TodoList/logineReducer/SET_EMAIL';\r\nexport const SET_PASSWORD = 'TodoList/logineReducer/SET_PASSWORD';\r\n\r\ninterface ILoginState {\r\n    isLogin: boolean;\r\n    email: string;\r\n    password: string\r\n}\r\n\r\nconst initialState: ILoginState = {\r\n    isLogin: false,\r\n    email: '',\r\n    password: ''\r\n};\r\n\r\nconst loginReducer = (state = initialState, action: ILogine) => {\r\n    switch (action.type) {\r\n        case SET_IS_LOGIN:\r\n            return {\r\n                ...state,\r\n                isLogin: true\r\n            };\r\n\r\n        case LOG_OUT:\r\n            return {\r\n                ...state,\r\n                isLogin: false\r\n            };\r\n\r\n        case SET_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.emailTitle\r\n            };\r\n\r\n        case SET_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.passwordTitle\r\n            }\r\n    }\r\n    return state\r\n};\r\n\r\nexport const setLogin = () => {\r\n    return {type: SET_IS_LOGIN}\r\n};\r\n\r\nexport const logOut = () => {\r\n    return {type: LOG_OUT}\r\n};\r\n\r\n\r\nexport const inputEmailAC = (emailTitle: string) => {\r\n    return {type: SET_EMAIL, emailTitle}\r\n};\r\n\r\nexport const inputPasswordAC = (passwordTitle: string) => {\r\n    return {type: SET_PASSWORD, passwordTitle}\r\n};\r\n\r\nexport const loginTC = () => async (dispatch: any, getState: any) => {\r\n    const state = getState();\r\n    const response = await api.login(state.login.email, state.login.password);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setLogin())\r\n    }\r\n};\r\n\r\nexport const logoutTC = () => async (dispatch: any) => {\r\n    let response = await api.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(logOut())\r\n    }\r\n};\r\n\r\nexport default loginReducer;","import React, {ChangeEvent} from 'react';\r\nimport {inputEmailAC, inputPasswordAC, loginTC} from \"./loginReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IMapDispatchProps {\r\n    inputEmailAC: (e: string) => void\r\n    inputPasswordAC: (e: string) => void\r\n    loginTC: () => void\r\n}\r\n\r\nclass Login extends React.Component<IMapDispatchProps> {\r\n\r\n    inputEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.props.inputEmailAC(e.currentTarget.value)\r\n    };\r\n\r\n    inputPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.props.inputPasswordAC(e.currentTarget.value)\r\n    };\r\n\r\n    login = () => {\r\n        this.props.loginTC()\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={'loginWrapper'}>\r\n                <h4 className={'testEmailPassword'}>Для просмотра соц сети введите тестовый Email и Password</h4>\r\n                <h4 className={'testEmailPassword'}>Email: free@samuraijs.com</h4>\r\n                <h4 className={'testEmailPassword'}>Password: free</h4>\r\n                <input className={'inputEmail'} onChange={this.inputEmail}/>\r\n                <input className={'inputPassword'} type={'password'} onChange={this.inputPassword}/>\r\n                <button onClick={this.login}>Sign in</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {inputEmailAC, inputPasswordAC, loginTC})(Login);\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {logoutTC} from \"./loginReducer\";\r\n\r\ninterface IMapDispatchProps {\r\n    logoutTC: () => void\r\n}\r\n\r\nconst LogOut = (props: IMapDispatchProps) => {\r\n\r\n return (\r\n     <div>\r\n         <button className={'buttonLogOut'} onClick={props.logoutTC}>Log out</button>\r\n     </div>\r\n )\r\n};\r\n\r\nexport default connect (null, {logoutTC})(LogOut)","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodolistTC, setTodolistsTC} from \"./reducer\";\r\nimport {RootState} from \"./store\";\r\nimport {ITodo} from \"./types/interface\";\r\nimport Login from \"./Login\";\r\nimport LogOut from './LogOut';\r\n\r\n\r\ninterface IMapStateProps {\r\n    todolists: ITodo[]\r\n    isLogin: boolean\r\n}\r\n\r\ninterface IMapDispatchProps {\r\n    setTodolistsTC: () => void\r\n    addTodolistTC: (title: string) => void\r\n}\r\n\r\nclass App extends React.Component<IMapStateProps & IMapDispatchProps> {\r\n\r\n    nextTodoListId = 0;\r\n\r\n    // state: IState = {\r\n    //     todolists: []\r\n    // }\r\n\r\n    addTodoList = (title: string) => {\r\n        this.props.addTodolistTC(title)\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n\r\n\r\n    // saveState = () => {\r\n    //     let stateAsString = JSON.stringify(this.state);\r\n    //     localStorage.setItem(\"todolists-state\", stateAsString);\r\n    // };\r\n\r\n    restoreState = () => {\r\n        this.props.setTodolistsTC();\r\n    };\r\n\r\n\r\n    // ___restoreState = () => {\r\n    //     // объявляем наш стейт стартовый\r\n    //     let state = this.state;\r\n    //     // считываем сохранённую ранее строку из localStorage\r\n    //     let stateAsString = localStorage.getItem(\"todolists-state\");\r\n    //     // а вдруг ещё не было ни одного сохранения?? тогда будет null.\r\n    //     // если не null, тогда превращаем строку в объект\r\n    //     if (stateAsString != null) {\r\n    //         state = JSON.parse(stateAsString);\r\n    //     }\r\n    //     // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\r\n    //     this.setState(state, () => {\r\n    //         this.state.todolists.forEach(t => {\r\n    //             if (t.id >= this.nextTodoListId) {\r\n    //                 this.nextTodoListId = t.id + 1;\r\n    //             }\r\n    //         })\r\n    //     });\r\n    // };\r\n\r\n    render = () => {\r\n        const todolists = this.props.todolists\r\n            .map((tl) => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>);\r\n        return (\r\n            <div>\r\n                {this.props.isLogin ?\r\n                    <div>\r\n                        <div>\r\n                            <AddNewItemForm addItem={this.addTodoList}/>\r\n                            <LogOut />\r\n                        </div>\r\n                        <div className=\"App\">\r\n                            {todolists}\r\n                        </div>\r\n                    </div> : <Login/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): IMapStateProps => {\r\n    return {\r\n        todolists: state.todolist.todolists,\r\n        isLogin: state.login.isLogin\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {addTodolistTC, setTodolistsTC})(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {applyMiddleware,combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport todolistReducer from \"./reducer\";\r\nimport loginReducer from \"./loginReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: todolistReducer,\r\n    login: loginReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}