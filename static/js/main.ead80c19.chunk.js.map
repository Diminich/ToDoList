{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","task","id","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priotityTitle","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","Fragment","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","newTaskTitle","todolistId","post","concat","get","put","delete","ADD_TASK","initialState","todolists","addTaskTC","dispatch","then","res","newTasks","data","item","newTask","addTaskAC","reducer","arguments","length","undefined","action","Object","objectSpread2","tl","toConsumableArray","newTodolist","filter","t","taskId","obj","console","log","TodoList","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","setTasks","addTask","newFilterValue","changeTask","forEach","updateTask","deleteTodolist","updateTodolistTitle","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","newTasksTitileRef","createRef","ConnectedTodolist","connect","allTasks","items","setTasksAC","setTasksTC","updateTaskAC","updateTaskTC","deleteTodolistAC","deleteTodolistTC","deleteTaskAC","deleteTaskTC","updateTodolistTitleAC","updateTodolistTitleTC","App","nextTodoListId","addTodoList","addTodolist","setTodolists","___restoreState","getItem","parse","src_TodoList","ConnectedApp","todolist","addTodolistAC","addTodolistTC","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ead80c19.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    };\n\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0: priotityTitle = \"Low\"; break;\n            case 1: priotityTitle = \"Middle\"; break;\n            case 2: priotityTitle = \"High\"; break;\n            case 3: priotityTitle = \"Urgently\"; break;\n            case 4: priotityTitle = \"Later\"; break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, priority: {priotityTitle} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => {\n        this.props.changeFilter(\"All\");\n    }\n    onCompletedFilterClick = () => {\n        this.props.changeFilter(\"Completed\");\n    }\n    onActiveFilterClick = () => {\n        this.props.changeFilter(\"Active\");\n    }\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    }\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div className='todoListFooterButton'>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n                }\n                {!this.state.isHidden && <div className='todoListIsHidden'>\n                    <span className='todoListFooterSpan' onClick={this.onShowFiltersClick}>hide</span>\n                </div>\n                }\n                {this.state.isHidden && <div className='todoListIsShow'>\n                    <span className='todoListFooterSpan' onClick={this.onHideFiltersClick}>show</span>\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTitle(this.state.title);\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    render = () => {\n        return (\n            <>\n            {\n                this.state.editMode\n                    ? <input value={this.state.title} autoFocus={true} onBlur={this.deactivateEditMode} onChange={this.onTitleChanged}/>\n                    : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}\n                        <button className='buttonHeaderTitle' onClick={this.props.onDelete}>X</button>\n                    </h3>\n            }\n            </>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button className='buttonAddTodoLists' onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"3af6bfa5-65e5-4eec-88f6-fc8f87e12121\"}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    createTodolist(title) {\r\n        return instance.post(\"\", {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n    },\r\n    updateTask(task) {\r\n        return instance.put(`/tasks`,  task);\r\n    },\r\n    deleteTodolist(id) {\r\n        return instance.delete(\"/\" + id)\r\n    },\r\n    deleteTask(id) {\r\n        return instance.delete(`/tasks/${id}`)\r\n    },\r\n    getTasks(todolistId) {\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    updateTodolistTitle(title, todolistId) {\r\n        return instance.put(`/${todolistId}`, {title: title})\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import {api} from \"./api\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const UPDATE_TODOLIST_TITLE = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\n\r\nconst initialState = {\r\n    \"todolists\": [\r\n        // {\r\n        //     \"id\": 0, \"title\": \"every day\",\r\n        //     tasks: [\r\n        //         {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n        //         {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n        //         {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n        //         {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n        //         {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n        //         {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n        // },\r\n        // {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n        // {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n        // {\"id\": 3, \"title\": \"dddd\", tasks: []}\r\n    ]\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id != action.todolistId)\r\n            };\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id != action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id != action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id != action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n};\r\n\r\nconst updateTaskAC = (taskId, obj, todolistId) => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n};\r\n\r\nexport const updateTaskTC = (taskId, obj, todolistId) => {\r\n    return (dispatch) => {\r\n        api.updateTask(obj)\r\n            .then(() => {\r\n                dispatch(updateTaskAC(taskId, obj, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst deleteTodolistAC = (todolistId) => {\r\n    return {type: DELETE_TODOLIST, todolistId: todolistId};\r\n};\r\n\r\nexport const deleteTodolistTC = (todolistId) => {\r\n    return (dispatch) => {\r\n        api.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(deleteTodolistAC(todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst deleteTaskAC = (taskId, todolistId) => {\r\n    return {type: DELETE_TASK, todolistId, taskId};\r\n};\r\n\r\nexport const deleteTaskTC = (taskId, todolistId ) => {\r\n    return (dispatch) => {\r\n        api.deleteTask(taskId)\r\n            .then(() => {\r\n                dispatch(deleteTaskAC(taskId, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst updateTodolistTitleAC = (title, todolistId) => {\r\n    return {type: UPDATE_TODOLIST_TITLE, title, todolistId};\r\n};\r\n\r\nexport const updateTodolistTitleTC = (title, todolistId) => {\r\n    return (dispatch) => {\r\n        api.updateTodolistTitle(title, todolistId)\r\n            .then(() => {\r\n                dispatch(updateTodolistTitleAC(title, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst addTaskAC = (newTask, todolistId) => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n};\r\n\r\nexport const addTaskTC = (todolistId, newText) => {\r\n    return (dispatch) => {\r\n        api.createTask(newText, todolistId).then(res => {\r\n            let newTasks = res.data.data.item;\r\n            dispatch(addTaskAC(newTasks, todolistId));\r\n        });\r\n    }\r\n};\r\n\r\nconst setTasksAC = (tasks, todolistId) => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n};\r\n\r\nexport const setTasksTC = (todolistId) => {\r\n    return (dispatch) => {\r\n        api.getTasks(todolistId)\r\n            .then(res => {\r\n                let allTasks = res.data.items;                           // items - это таски сервака\r\n                dispatch(setTasksAC(allTasks, todolistId));\r\n            });\r\n    }\r\n};\r\n\r\nconst addTodolistAC = (newTodolist) => {\r\n    return {type: ADD_TODOLIST, newTodolist: newTodolist}\r\n};\r\n\r\nexport const addTodolistTC = (newTodolist) => {\r\n    return (dispatch) => {\r\n        api.createTodolist(newTodolist)\r\n            .then(res => {\r\n                let todolist = res.data.data.item;\r\n                dispatch(addTodolistAC(todolist, newTodolist));\r\n            });\r\n    }\r\n};\r\n\r\nconst setTodolistsAC = (todolists) => {\r\n    return {type: SET_TODOLISTS, todolists: todolists}\r\n};\r\n\r\nexport const setTodolistsTC = () => {\r\n    return (dispatch) => {\r\n        api.getTodolists()\r\n            .then(res => {\r\n            dispatch(setTodolistsAC(res.data));\r\n        });\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskTC,\n    deleteTaskTC,\n    deleteTodolistTC,\n    setTasksTC,\n    updateTaskTC,\n    updateTodolistTitleTC\n} from \"./reducer\";\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        this.props.setTasks(this.props.id);\n    };\n\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        this.props.addTask(newText, this.props.id);\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        });\n    };\n\n    changeTask = (taskId, obj) => {\n        this.props.tasks.forEach(t => {\n            if (t.id === taskId) {\n                this.props.updateTask(taskId, {...t, ...obj}, this.props.id)\n            }\n        })\n    };\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    };\n\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    };\n\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.id)\n    };\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(taskId, this.props.id)\n    };\n\n    updateTitle = (title) => {\n        this.props.updateTodolistTitle(title, this.props.id)\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle title={this.props.title} onDelete={this.deleteTodolist}\n                                   updateTitle={this.updateTitle}/>\n                    <AddNewItemForm addItem={this.addTask}/>\n\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               deleteTask={this.deleteTask}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.isDone === false;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.isDone === true;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask(newText, todolistId) {\n            dispatch(addTaskTC(todolistId, newText));\n        },\n        setTasks(todolistId) {\n            dispatch(setTasksTC(todolistId));\n        },\n        updateTask(taskId, obj, todolistId) {\n            dispatch(updateTaskTC(taskId, obj, todolistId))\n        },\n        deleteTodolist: (todolistId) => {\n            dispatch(deleteTodolistTC(todolistId))\n        },\n        deleteTask: (taskId, todolistId) => {\n            dispatch(deleteTaskTC(taskId, todolistId))\n        },\n        updateTodolistTitle: (title, todolistId) => {\n            dispatch(updateTodolistTitleTC(title, todolistId))\n        }\n    }\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolistTC, setTodolistsTC} from \"./reducer\";\n\nclass App extends React.Component {\n\n    nextTodoListId = 0;\n\n    state = {\n        todolists: []\n    }\n\n    addTodoList = (title) => {\n        this.props.addTodolist(title)\n    };\n\n\n\n    componentDidMount() {\n        this.restoreState();\n    };\n\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    };\n\n    restoreState = () => {\n        this.props.setTodolists();\n    };\n\n\n    ___restoreState = () => {\n        // объявляем наш стейт стартовый\n        let state = this.state;\n        // считываем сохранённую ранее строку из localStorage\n        let stateAsString = localStorage.getItem(\"todolists-state\");\n        // а вдруг ещё не было ни одного сохранения?? тогда будет null.\n        // если не null, тогда превращаем строку в объект\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\n        this.setState(state, () => {\n            this.state.todolists.forEach(t => {\n                if (t.id >= this.nextTodoListId) {\n                    this.nextTodoListId = t.id + 1;\n                }\n            })\n        });\n    };\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>)\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodolist: (newTodolist) => {\n            dispatch(addTodolistTC(newTodolist))\n        },\n\n        setTodolists: () => {\n            dispatch(setTodolistsTC())\n        }\n\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport rootReducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}